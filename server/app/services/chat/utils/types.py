from typing import Annotated, Optional, List, Dict, Literal, Union
from typing_extensions import TypedDict
from langgraph.graph.message import add_messages
from langchain_core.messages import BaseMessage

# Custom intent type
Intent = Literal["qa", "rag", "db"]

class GraphState(TypedDict, total=False):
    # Full message history (used for LLM context)
    user_query: Annotated[List[BaseMessage], add_messages]

    # Cleaned version of the user's input
    normalized_query: Optional[str]

    # Predicted intent from the user query
    intent: Optional[Intent]

    # Follow-up questions generated by the assistant
    followup_questions: Optional[List[str]]

    # Retrieved documents from a vector store
    retrieved_docs: Optional[List[Dict]]

    # LLM-generated answer based on retrieved docs
    rag_answer: Optional[str]

    # Raw DB query results
    retrieved_db: Optional[Dict]

    # Answer synthesized from DB result
    db_answer: Optional[str]

    # Structured info about a student
    student_profile: Optional[Dict]

    # Final post-processed result from RAG
    rag_result: Optional[str]

    # Final formatted answer to return to user
    final_response: Optional[str]

    trace: Optional[List[Dict[str, Union[str, Dict]]]]